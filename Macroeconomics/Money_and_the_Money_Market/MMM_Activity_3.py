
# coding: utf-8

# ### Money & The Money Market -  Activity 3

# In[61]:

get_ipython().run_cell_magic(u'HTML', u'', u'\n<!DOCTYPE html>\n<html>\n    <head>\n        <style> \n            body {\n                margin: 10px;\n                /*padding-top: 40px;*/\n            }\n        </style>\n    </head>\n\n    <body>\n        <!-- COMMENT: Define the jxgbox - aka, where all the interactive graphing will go. -->\n        <div style="width: 100%; overflow: hidden;">\n            <div id=\'jxgbox1\' class=\'jxgbox\' style=\'width:450px; height:350px; float:left; border: solid #1f628d 2px;\'></div>\n        </div>\n        \n        <ul class="stack button-group">\n        <li><input class="btn" type="button" value="Fall in Money Demand" onClick="increaseXY()"></li>\n        <li><input class="btn" type="button" value="Rise in Money Demand" onClick="decreaseXY()"></li>\n        <li><input class="btn" type="button" value="Reset" onClick="resetAnimation()"></li>\n        \n        \n        <!-- COMMENT: Where our Javascript begins. -->\n        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jsxgraph/0.98/jsxgraphcore.js"></script>\n        <script type=\'text/javascript\'>\n\n            JXG.Options.point.showInfobox = false;\n            \n            /////////////////////////////////////////////////////////////\n            // Macro Supply and Demand Linear Lines\n            createSupply = function(board,gname,color) {\n                var c1 = [1.5,1.5];\n                var c2 = [9.5,9.5];\n                var S1 = board.create(\'point\',c1,{withLabel:false,visible:false});\n                var S2 = board.create(\'point\',c2,{withLabel:false,visible:false});\n                return board.create(\'segment\',[S1,S2],{\'strokeColor\':color,\'strokeWidth\':\'3\',\n                                                       \'name\':gname,\'withLabel\':true,\n                                                       \'label\':{\'offset\':[105,105]}\n                                                      });\n            }\n\n            createDemand = function(board,gname,color) {\n                var c1 = [1.5,9.5];\n                var c2 = [9.5,1.5];\n                var D1 = board.create(\'point\',c1,{withLabel:false,visible:false});\n                var D2 = board.create(\'point\',c2,{withLabel:false,visible:false});\n                return board.create(\'segment\',[D1,D2],{\'strokeColor\':color,\'strokeWidth\':\'3\',\n                                                       \'name\':gname,\'withLabel\':true,\n                                                       \'label\':{\'offset\':[105,-105]}\n                                                      });\n            }\n        \n            /////////////////////////////////////////////////////////////\n            // Dashed Lines\n            createDashedLines2Axis = function(board,intersection,options) {\n                var fixed = options.fixed || true;  // defaults\n                var withLabel = options.withLabel || false;\n                var xlabel = options.xlabel || \'\';  \n                var ylabel = options.ylabel || \'\';\n                var color = options.color || \'gray\';\n\n                var dashYp1 = board.create(\'point\',[0, intersection.Y()],\n                                           {withLabel:withLabel,name:ylabel,visible:true,size:\'0.5\',strokeColor:\'Gray\',\'label\':{\'offset\':[-25,-2]}});\n\n                var dashYp2 = board.create(\'point\',[intersection.X(), intersection.Y()],\n                                          {withLabel:false,visible:false});\n                var dashY1 = board.create(\'segment\',[dashYp1,dashYp2],\n                                          {strokeColor:color,strokeWidth:\'2\',dash:\'1\',fixed:fixed});\n\n                var dashXp1 = board.create(\'point\',[intersection.X(), 0],\n                                           {withLabel:withLabel,name:xlabel,visible:true,size:\'0.5\',strokeColor:\'Gray\',\'label\':{\'offset\':[-5,-8]}});\n\n                var dashXp2 = board.create(\'point\',[intersection.X(), intersection.Y()],\n                                           {withLabel:false,visible:false});\n\n                var dashX1 = board.create(\'segment\',[dashXp1,dashXp2],\n                                          {strokeColor:color,strokeWidth:\'2\',dash:\'1\',fixed:fixed});\n\n                return [dashXp1,dashXp2,dashYp1,dashYp2];\n            }\n        \n            bboxlimits = [-1.6, 12, 12, -1.1];\n            var brd1 = JXG.JSXGraph.initBoard(\'jxgbox1\', {axis:false, \n                                                    showCopyright: false,\n                                                    showNavigation: false,\n                                                    zoom: false,\n                                                    pan: false,\n                                                    boundingbox:bboxlimits,\n                                                    grid: false,\n                                                    hasMouseUp: true, \n            });\n            \n            xaxis = brd1.create(\'axis\', [[0, 0], [12, 0]], {withLabel: true, label: {offset: [320,-20]}});\n            yaxis = brd1.create(\'axis\', [[0, 0], [0, 12]], {withLabel: true, label: {offset: [-60,260]}});\n\n            //Axes\n            xaxis.removeAllTicks();\n            yaxis.removeAllTicks();\n            var ylabel = brd1.create(\'text\',[-1.5,10,"Interest<br>Rate"],{fixed:true,fontsize:14,highlight:false});\n            var xlabel = brd1.create(\'text\',[8,-0.5,"Quantity of Money"],{fixed:true,fontsize:14,highlight:false});\n            \n            //Demand 1\n            var D1 = createDemand(brd1,\'D1\',\'Gray\');\n            D1.setAttribute({fixed:true, dash:1});\n            var G = brd1.create(\'glider\',[6.0,6.0,D1],{fixed:true,visible:false});\n            \n            //Dashed Lines 2\n            var dashes1 = createDashedLines2Axis(brd1,G,\n                                                      {fixed:false,\n                                                       withLabel:true,\n                                                       xlabel:\'Y1\',\n                                                       ylabel:\'PL1\',\n                                                       color:\'Gray\'});\n\n            //Demand 2\n            var D2 = createDemand(brd1,\'D2\',\'DodgerBlue\');\n            D2.setAttribute({withLabel:false});\n\n            //Glider along demand curve\n            var G = brd1.create(\'glider\',[6.0,6.0,D2],{name:\'A\',withLabel:false,fixed:true});\n            \n            //Dashed Lines 2\n            var dashesDragB1 = createDashedLines2Axis(brd1,G,\n                                                      {fixed:false,\n                                                       withLabel:false,\n                                                       xlabel:\'Y2\',\n                                                       ylabel:\'PL2\',\n                                                       color:\'DodgerBlue\'});\n            var dashS2Xp1 = dashesDragB1[0];\n            var dashS2Xp2 = dashesDragB1[1];\n            var dashS2Yp1 = dashesDragB1[2];\n            var dashS2Yp2 = dashesDragB1[3];\n                        \n            //////////////////\n            // Interactivity\n            //////////////////\n            brd1.on(\'move\', function() {      \n                //Moving Dashed Lines in Board 1\n                dashS2Yp1.moveTo([0, G.Y()]);\n                dashS2Yp2.moveTo([G.X(), G.Y()]);\n\n                dashS2Xp1.moveTo([G.X(), 0]);\n                dashS2Xp2.moveTo([G.X(), G.Y()]);\n                brd1.update()\n            });\n            \n            brd1.on(\'mousedown\', function() {      \n                D2.setAttribute({withLabel:true,offset:[125,-85]});\n                \n                dashS2Xp1.setAttribute({withLabel:true});\n                dashS2Yp1.setAttribute({withLabel:true});\n                    \n                brd1.update()\n            });\n            \n            //Animation for shifting curve SouthWest\n            decreaseXY = function() {\n                resetAnimation();\n                D2.setAttribute({withLabel:true,offset:[125,-85]});\n                D2.point1.moveTo([0.5,8.5],10);\n                D2.point2.moveTo([8.5,0.5],10);\n                \n                brd1.update();\n            }\n            \n            //Animation for shifting curve NorthEast\n            increaseXY = function() {\n                resetAnimation();\n                D2.setAttribute({withLabel:true,offset:[125,-85]});\n                D2.moveTo()\n                brd1.update();\n            }\n            \n            resetAnimation = function() {\n                D2.setAttribute({withLabel:false,offset:[125,-85]});\n                \n                D2.point1.moveTo([1.5,9.5],10);\n                D2.point2.moveTo([9.5,1.5],10);\n                \n                dashS2Xp1.setAttribute({withLabel:true});\n                dashS2Yp1.setAttribute({withLabel:true});\n                brd1.update();\n            }\n            \n            \n        </script>\n    </body>\n</html>')


# ###Ungraded

# In[5]:

import re

#tmpfile = _i86
index_htmlinput = [ i for i,x in enumerate(_ih) if "run_cell_magic(u'HTML'" in x and "re.sub('%%HTML','',tmpfile)" not in x]

tmpfile = eval('_i%d' % int(index_htmlinput[-1]))
tmpfile = re.sub('%%HTML','',tmpfile)
tmpfile = re.sub(r'<!--START-BUTTON FOR PASS STATE(.*?)END-BUTTON FOR PASS STATE-->','',tmpfile,flags=re.DOTALL)
tmpfile = re.sub(r'//START-PASS STATE TO IPYTHON KERNEL(.*?)//END-PASS STATE TO IPYTHON KERNEL','',tmpfile,flags=re.DOTALL)

filename = 'MMM_Activity_2'
html_filename = '%s.html' % filename

with open(html_filename,'w') as hfile:
    hfile.write(tmpfile)
print tmpfile


# In[ ]:



