
# coding: utf-8

# ### Money & The Money Market -  Activity 3

# In[63]:

get_ipython().run_cell_magic(u'HTML', u'', u'\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset="UTF-8">\n        <title>Money and the Money Market</title>\n        <script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=AM_HTMLorMML-full"></script>\n        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jsxgraph/0.98/jsxgraphcore.js"></script>\n        <script type="text/javascript" src="underscore-min.js"></script>\n        <script type="text/javascript" src="jquery.min.js"></script>\n        <script type="text/javascript" src="jquery-ui.min.js"></script>\n        <script type="text/javascript" src="../../JS/Macro.js"></script>\n        <script type="text/javascript" src="MMM_Activity_3.js"></script>\n    </head>\n\n    <body>\n        <!-- COMMENT: Define the jxgbox - aka, where all the interactive graphing will go. -->\n        <div style="width: 100%; overflow: hidden;">\n            <div id=\'jxgbox1\' class=\'jxgbox\' style=\'width:550px; height:450px; float:left; border: solid #1f628d 2px;\'></div>\n        </div>\n        \n        <div class="line">\n            <input class="btn" type="button" value="Fall in Money Demand" onClick="increaseXY()">\n            <input class="btn" type="button" value="Rise in Money Demand" onClick="decreaseXY()">\n            <input class="btn" type="button" value="Reset" onClick="resetAnimation()">\n        </div>\n        \n        \n        <!-- COMMENT: Where our Javascript begins. -->\n        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jsxgraph/0.98/jsxgraphcore.js"></script>\n        <script type=\'text/javascript\'>\n        \n            bboxlimits = [-1.6, 12, 12, -1.1];\n            var brd1 = JXG.JSXGraph.initBoard(\'jxgbox1\', {axis:false, \n                                                    showCopyright: false,\n                                                    showNavigation: false,\n                                                    zoom: false,\n                                                    pan: false,\n                                                    boundingbox:bboxlimits,\n                                                    grid: false,\n                                                    hasMouseUp: true, \n            });\n            \n            xaxis = brd1.create(\'axis\', [[0, 0], [12, 0]], {withLabel: true, label: {offset: [320,-20]}});\n            yaxis = brd1.create(\'axis\', [[0, 0], [0, 12]], {withLabel: true, label: {offset: [-60,260]}});\n\n            //Axes\n            xaxis.removeAllTicks();\n            yaxis.removeAllTicks();\n            var ylabel = brd1.create(\'text\',[-1.5,10,"Interest<br>Rate"],{fixed:true,fontsize:14,highlight:false});\n            var xlabel = brd1.create(\'text\',[8,-0.5,"Quantity of Money"],{fixed:true,fontsize:14,highlight:false});\n            \n            //Demand 1\n            var D1 = createDemand(brd1,{name:\'D1\',color:\'Gray\'});\n            D1.setAttribute({fixed:true, dash:1});\n            var G = brd1.create(\'glider\',[5.5,6.5,D1],{fixed:true,visible:false});\n            \n            ////////////\n            // Fixed Dashed Lines for Board 1\n            ////////////\n            var dashD1 = createDashedLines2Axis(brd1,G,\n                                              {fixed:true,\n                                               withLabel:true,\n                                               xlabel:\'Y1\',\n                                               ylabel:\'PL1\',\n                                               color:\'Gray\'});\n            \n            \n            //Demand 2\n            var D2 = createDemand(brd1,{name:\'D2\',color:\'DodgerBlue\'});\n            D2.setAttribute({withLabel:false,offset:[125,-85]});\n\n            //Glider along demand curve\n            var G = brd1.create(\'glider\',[5.5,6.5,D2],{name:\'A\',withLabel:false,fixed:true});\n    \n            ////////////\n            // Draggable Dashed Lines for Board 1\n            ////////////\n            var dashD2 = createDashedLines2Axis(brd1,G,\n                                              {fixed:false,\n                                               withLabel:false,\n                                               xlabel:\'Y2\',\n                                               ylabel:\'PL2\',\n                                               color:\'DodgerBlue\'});\n            \n            \n            \n                        \n            toggleLabels = function(toggle) {\n                dashD2.X1.setAttribute({withLabel:toggle});\n                dashD2.Y1.setAttribute({withLabel:toggle});\n                D2.setAttribute({withLabel:toggle});\n            };\n            \n            //////////////////\n            // Interactivity\n            //////////////////\n            brd1.on(\'move\', function() {      \n                //Moving Dashed Lines in Board 1\n                dashD2.Y1.moveTo([0, G.Y()]);\n                dashD2.Y2.moveTo([G.X(), G.Y()]);\n\n                dashD2.X1.moveTo([G.X(), 0]);\n                dashD2.X2.moveTo([G.X(), G.Y()]);\n                brd1.update()\n            });\n            \n            brd1.on(\'mousedown\', function() {      \n                toggleLabels(true);\n                brd1.update()\n            });\n            \n            //Animation for shifting curve SouthWest\n            decreaseXY = function() {\n                resetAnimation(10);\n                var speed = 1000;\n                toggleLabels(true);\n                \n                D2.point1.moveTo([D2.point1.X()-0.5,D2.point1.Y()-1.5],speed);\n                D2.point2.moveTo([D2.point2.X()-0.5,D2.point2.Y()-1.5],speed);\n                \n                dashD2.Y1.moveTo([0, G.Y()-1.5],speed);\n                dashD2.Y2.moveTo([G.X()-0.5, G.Y()-1.5],speed);\n\n                dashD2.X1.moveTo([G.X()-0.5, 0],speed);\n                dashD2.X2.moveTo([G.X()-0.5, G.Y()-1.5],speed);\n                \n                brd1.update();\n            }\n            \n            //Animation for shifting curve NorthEast\n            increaseXY = function() {\n                var speed = 1000;\n                resetAnimation(10);\n                toggleLabels(true);\n                \n                D2.point1.moveTo([D2.point1.X()+0.5,D2.point1.Y()+1.5],speed);\n                D2.point2.moveTo([D2.point2.X()+0.5,D2.point2.Y()+1.5],speed);\n                \n                dashD2.Y1.moveTo([0, G.Y()+1.5],speed);\n                dashD2.Y2.moveTo([G.X()+0.5, G.Y()+1.5],speed);\n\n                dashD2.X1.moveTo([G.X()+0.5, 0],speed);\n                dashD2.X2.moveTo([G.X()+0.5, G.Y()+1.5],speed);\n                \n                brd1.update();\n            }\n            \n            resetAnimation = function(speed) {\n                toggleLabels(false);                \n                D2.point1.moveTo([1,10],speed);\n                D2.point2.moveTo([9,2],speed);\n                \n                dashD2.Y1.moveTo([0, 5.5],speed);\n                dashD2.Y2.moveTo([5.5, 5.5],speed);\n\n                dashD2.X1.moveTo([5.5, 0],speed);\n                dashD2.X2.moveTo([5.5, 5.5],speed);\n                \n                brd1.update();\n            }\n            \n            \n        </script>\n    </body>\n</html>')


# ###Ungraded

# In[5]:

import re

#tmpfile = _i86
index_htmlinput = [ i for i,x in enumerate(_ih) if "run_cell_magic(u'HTML'" in x and "re.sub('%%HTML','',tmpfile)" not in x]

tmpfile = eval('_i%d' % int(index_htmlinput[-1]))
tmpfile = re.sub('%%HTML','',tmpfile)
tmpfile = re.sub(r'<!--START-BUTTON FOR PASS STATE(.*?)END-BUTTON FOR PASS STATE-->','',tmpfile,flags=re.DOTALL)
tmpfile = re.sub(r'//START-PASS STATE TO IPYTHON KERNEL(.*?)//END-PASS STATE TO IPYTHON KERNEL','',tmpfile,flags=re.DOTALL)

filename = 'MMM_Activity_2'
html_filename = '%s.html' % filename

with open(html_filename,'w') as hfile:
    hfile.write(tmpfile)
print tmpfile


# In[ ]:



